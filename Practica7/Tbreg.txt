library IEEE;
library STD;
use STD.TEXTIO.ALL;
use IEEE.STD_LOGIC_TEXTIO.ALL;
use IEEE.STD_LOGIC_1164.ALL;
use ieee.std_logic_arith.all;
use ieee.std_logic_unsigned.all;

entity Tbreg is
end Tbreg;

architecture Behavioral of Tbreg is

component FileReg is 
	Port( writeReg, readReg1, readReg2, shamt: in STD_LOGIC_VECTOR(3 downto 0);
		writeData: in STD_LOGIC_VECTOR(15 downto 0);
		clk,clr,wr,she,dir: in STD_LOGIC;
		readData1, readData2: out STD_LOGIC_VECTOR(15 downto 0));
end component;

--entradas
--signal writeReg, readReg1, readReg2, shamt:  STD_LOGIC_VECTOR(3 downto 0);
--signal	writeData: STD_LOGIC_VECTOR(15 downto 0);
--signal clk,clr,wr,she,dir: STD_LOGIC;
--signal readData1, readData2: STD_LOGIC_VECTOR(15 downto 0);


--NUEVAS--****
signal wrD :STD_LOGIC_VECTOR(15 downto 0);--writeData
signal wrReg:STD_LOGIC_VECTOR(3 downto 0);--writeReg
signal readR1: STD_LOGIC_VECTOR(3 downto 0);--read1
signal readR2: STD_LOGIC_VECTOR(3 downto 0);--read2
signal sh: STD_LOGIC_VECTOR(3 downto 0);--shamt
signal clk,clr,she,rw,dir: STD_LOGIC;

signal readD2  : STD_LOGIC_VECTOR (15 downto 0);--readDatas
signal readD1  : STD_LOGIC_VECTOR (15 downto 0);--salidas

begin

clock : process
        begin
            clk <= '0';
            wait for 5 ns;
            clk <= '1';
            wait for 5 ns;
        end process;
        
TestFR: FileReg
    Port map(
        writeReg => wrReg,
        readReg1 => readR1,
        readReg2 => readR2,
        shamt => sh,
        writeData => wrD,
        clk=>clk,
        clr=>clr,
        wr=>rw,
        she => she,
        dir => dir,
        readData1 => readD1,
        readData2 => readD2
        );
 
stimulators: process
    file RES : TEXT;
        variable L_RE : line;
        variable vrd1: STD_LOGIC_VECTOR(15 downto 0);--salidas
        variable vrd2: STD_LOGIC_VECTOR(15 downto 0);--salidas
        
    file STIMU : TEXT;
        variable L_E : line;
        variable vclr: STD_LOGIC;
        variable vrR1:STD_LOGIC_VECTOR(3 downto 0);--readReg
        variable vrR2: STD_LOGIC_VECTOR(3 downto 0);
        variable vshamt: STD_LOGIC_VECTOR(3 downto 0);
        variable vwrRe: STD_LOGIC_VECTOR(3 downto 0);
        variable vwd: STD_LOGIC_VECTOR(15 downto 0);
        variable vwr: STD_LOGIC;
        variable vshe: STD_LOGIC;
        variable vdir: STD_LOGIC;
            
        --lectura de cadenas
        variable CADENA: STRING(1 to 5);
            
        begin
        file_open(STIMU, "C:\Users\Luis FC\Documents\Semestre 21-2\Arquitectura de Computadoras\AR2\ESTIMULOS.TXT", READ_MODE);
        file_open(RES,"C:\Users\Luis FC\Documents\Semestre 21-2\Arquitectura de Computadoras\AR2\RESULTADO.TXT", WRITE_MODE);
        
        CADENA:= "RR1  ";
        write(L_RE,CADENA,left,1);
        CADENA:= "RR2  ";
        write(L_RE,CADENA,left,1);
        CADENA:= "SHAMT";
        write(L_RE,CADENA,left,6);
        CADENA:= "WREG ";
        write(L_RE,CADENA,left,1);
        CADENA:= "WD   ";
        write(L_RE,CADENA,left,1);
        CADENA:= "CLR  ";
        write(L_RE,CADENA,left,1);
        CADENA:= "WR   ";
        write(L_RE,CADENA,left,1);
        CADENA:= "SHE  ";
        write(L_RE,CADENA,left,1);
        CADENA:= "DIR  ";
        write(L_RE,CADENA,left,1);
        CADENA:= "RD1  ";
        write(L_RE,CADENA,left,2);
        CADENA:= "RD2  ";
        write(L_RE,CADENA,left,2);
        writeline(RES,L_RE);
        
        wait for 80ns;
        
        FOR i in 0 to 11 loop
            readline(STIMU,L_E);
            hread(L_E,vrR1);
            readR1<=vrR1;
            
            hread(L_E,vrR2);
            readR2<=vrR2;
            
            hread(L_E,vshamt);
            sh<=vshamt;
            
            hread(L_E,vwrRe);
            wrReg<=vwrRe;
            
            hread(L_E,vwd);
            wrD<=vwd;
            
            read(L_E, vclr);
            clr<=vclr;
            
            read(L_E, vwr);
            rw<=vwr;
            
            read(L_E, vshe);
            she<=vshe;
            
            read(L_E,vdir);
            dir<=vdir;
            
            wait until rising_edge(clk);
            
            vrd1:=readD1;
            vrd2:=readD2;
            
            hwrite(L_RE, vrR1, left, 5);
            hwrite(L_RE, vrR2, left, 5);
            hwrite(L_RE, vshamt, left, 6);
            hwrite(L_RE, vwrRe, left, 5);
            hwrite(L_RE, vwd, left, 5);
            write(L_RE, vclr, left, 5);
            write(L_RE, vwr, left, 5);
            write(L_RE, vshe, left, 5);
            write(L_RE, vdir, left, 5);
            hwrite(L_RE, vrd1, left, 5);
            hwrite(L_RE, vrd2, left, 5);
            
            writeline(RES,L_RE);
            end loop;
            file_close(STIMU);
            file_close(RES);
            
            wait;
            end process;
            
            
                        
        
        
--stimulators: process
----salidas para archivo de texto resultados
--file RESULTADO:TEXT;
--    variable L_RE: line;
--    variable vrd1: STD_LOGIC_VECTOR(15 downto 0);
--    variable vrd2: STD_LOGIC_VECTOR(15 downto 0);
    
----declarar entradas ahora

--file ESTIMULOS: TEXT;
--    variable L_EN:line;
--    variable vclr : STD_LOGIC;
--    variable vrereg1: STD_LOGIC_VECTOR(3 downto 0);
--    variable vrereg2: STD_LOGIC_VECTOR(3 downto 0);
--    variable vshamt: STD_LOGIC_VECTOR(3 downto 0);
--    variable vwrire: STD_LOGIC_VECTOR(3 downto 0);
--    variable vwd: STD_LOGIC_VECTOR(15 downto 0);
--    variable vwr: STD_LOGIC;
--    variable vshe: STD_LOGIC;
--    variable vdir: STD_LOGIC; 
--    variable CADENA: STRING(1 TO 5);
    
--begin
--    file_open(ESTIMULOS, "C:\Users\Luis FC\Documents\Semestre 21-2\Arquitectura de Computadoras\AR2\ESTIMULOS.TXT", READ_MODE);
--    file_open(RESULTADO,"C:\Users\Luis FC\Documents\Semestre 21-2\Arquitectura de Computadoras\AR2\RESULTADO.TXT", WRITE_MODE);   

--    CADENA := "RR1  ";--READ REGISTER
--    write(L_RE, CADENA, left, CADENA'LENGTH+1);
--    CADENA:="RR2  ";
--    write(L_RE, CADENA, left, CADENA'LENGTH+1);
--    CADENA:="SHAMT";
--    write(L_RE, CADENA, left, CADENA'LENGTH+6);
--    CADENA:="WREG ";
--    write(L_RE, CADENA, left, CADENA'LENGTH+1);
--    CADENA:="WD   ";
--    write(L_RE, CADENA, left, CADENA'LENGTH+1);
--    CADENA:="CLR  ";
--    write(L_RE, CADENA, left, CADENA'LENGTH+1);
--    CADENA:="WR   ";
--    write(L_RE, CADENA, left, CADENA'LENGTH+1);
--    CADENA:="SHE  ";
--    write(L_RE, CADENA, left, CADENA'LENGTH+1);
--    CADENA:="DIR  ";
--    write(L_RE, CADENA, left, CADENA'LENGTH+1);
--    CADENA:="RD1  ";--READ DATA
--    write(L_RE, CADENA, left, CADENA'LENGTH+2);
--    CADENA:="RD2  ";
--    write(L_RE, CADENA, left, CADENA'LENGTH+2);
    
--    writeline(RESULTADO,L_RE);
--    wait for 80ns;
    
--    --ahora a leer archivo
--    for i in 0 to 11 loop
--    readline(ESTIMULOS,L_EN);
    
--    hread(L_EN,vrereg1);
--    readReg1<=vrereg1;
    
--    hread(L_EN,vrereg2);
--    readReg2<=vrereg2;
    
--    hread(L_EN,vshamt);
--    shamt<=vshamt;
    
--    hread(L_EN,vwrire);
--    writeReg<=vwrire;
    
--    hread(L_EN,vwd);
--    writeData<=vwd;
    
--    read(L_EN,vclr);
--    clr<=vclr;
    
--    read(L_EN,vwr);
--    wr<=vwr;
    
--    read(L_EN,vshe);
--    she<=vshe;
    
--    read(L_EN, vdir);
--    dir<=vdir;
    
--    wait until RISING_EDGE(clk);
--    vrd1:=readD1;
--    vrd2:=readD2;
    
--    hwrite(L_RE, vrereg1, left, 5);
--    hwrite(L_RE, vrereg2, left, 5);
--    hwrite(L_RE, vshamt, left, 6);
--    hwrite(L_RE, vwrire, left, 5);
--    hwrite(L_RE, vwd, left, 5);
--    --write(L_RE, vclr, left, 5);
--    write(L_RE, vwr, left, 5);
--    write(L_RE, vshe, left, 5);
--    write(L_RE, vdir, left, 5);
--    hwrite(L_RE, vrd1, left, 5);
--    hwrite(L_RE, vrd2, left, 5);
    
--    writeline(RESULTADO, L_RE);
--  end loop;
  
--  file_close(ESTIMULOS);
--  file_close(RESULTADO);
-- wait;
-- end process;


end Behavioral;