library IEEE;
library STD;
use STD.TEXTIO.ALL;
use IEEE.STD_LOGIC_TEXTIO.ALL;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;

entity Tbpila is
end Tbpila;

architecture Tb of Tbpila is 
component PilaH is
	Port(pcIn: in STD_LOGIC_VECTOR(15 downto 0);
	wPC,clk,clr,UP,DW: in STD_LOGIC;
	pcOut: out STD_LOGIC_VECTOR(15 downto 0);
	stackP: out STD_LOGIC_VECTOR(2 downto 0));
end component;

--signals
signal pcIn: STD_LOGIC_VECTOR(15 downto 0);
signal wPC: STD_LOGIC;
signal clk: STD_LOGIC;
signal clr: STD_LOGIC;
signal UP: STD_LOGIC;
signal DW: STD_LOGIC;
signal pcOut: STD_LOGIC_VECTOR(15 downto 0);
signal stackP: STD_LOGIC_VECTOR(2 downto 0);

begin
clock : process
	begin 
		clk<='0';
		wait for 5 ns;
		clk<='1';
		wait for 5 ns;
	end process;

TestPila: PilaH

	Port map(
		pcIn=>pcIn,
		wPC=>wPC,
		clk=>clk,
		clr=>clr,
		UP=>UP,
		DW=>DW,
		pcOut=>pcOut,
		stackP=>stackP
	);

estimulos: process
	file RES: TEXT;
	variable L_RE: line;
	variable vpcOut: STD_LOGIC_VECTOR(15 downto 0);
	--variable vstackP: SDT_LOGIC_VECTOR(2 downto 0);--CHECAR ESTA

	file STIMU: TEXT;
	variable L_E: line;
	variable vpcIn: STD_LOGIC_VECTOR(15 downto 0);
	variable vwPC: STD_LOGIC;
	variable vclr: STD_LOGIC;
	variable vUP: STD_LOGIC;
	variable vDW: STD_LOGIC;
	
	variable CADENA: STRING(1 TO 2);

	begin
	
	file_open(STIMU,"C:\Users\Luis FC\Documents\Semestre 21-2\Arquitectura de Computadoras\Pila\ESTIMULOS.TXT",READ_MODE);
	file_open(RES,"C:\Users\Luis FC\Documents\Semestre 21-2\Arquitectura de Computadoras\Pila\RESULTADO.TXT",WRITE_MODE);

	CADENA:="SP";
	write(L_RE, CADENA, LEFT, 3);
	
	CADENA:="PC";
	write(L_RE, CADENA, LEFT,5);

	writeline(RES, L_RE);

	FOR i in 1 to 24 loop --26 ESTIMULOS con clear al principio
	readline(STIMU, L_E);

	hread(L_E, vpcIn);
	pcIn<=vpcIn;

	read(L_E, vwPC);
	wPC<=vwPC;

	read(L_E, vclr);
	clr<=vclr;

	read(L_E, vUP);
	UP<=vUP;

	read(L_E, vDW);
	DW<=vDW;
	
	wait until rising_edge(clk);

	vpcOut:=pcOut;
	--vstackP:=stackP;--CHECAR ESTO AGAIN
	
	--aux:=conv_integer(unsigned(stackP));CHECAR ESTO AGAIN
	--write(L_RE, aux, LEFT, 3);-------
	Hwrite(L_RE,stackP,right,3);
	Hwrite(L_RE, vpcOut, right, 5);
	writeline(RES,L_RE);
	end loop;
	
	file_close(RES);
	file_close(STIMU);
	wait;
end process;
end Tb;
